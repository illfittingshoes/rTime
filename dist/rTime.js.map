{"version":3,"sources":["rTime.js"],"names":[],"mappings":"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","file":"rTime.js","sourcesContent":["/**\n * Create and interact with JS Date objects consistently and easily. rTime is\n * a static, low-level library that uses and returns standard JS Date objects. It has no state,\n * and there is no \"rTime\" type. You're dealing with the same old object, just via a less\n * ambiguous and confusing interface. Compared to vanilla Date, rTime:\n * Allows creating a new Date without manually specifying every field,\n * such as when only time of day matters. Accepts broader string formats. Provides additional\n * straightforward UTC <-> Local time zone helpers. Disambiguates some field names (but aliases in\n * original names to prevent frustration). Makes months one-based. Always returns UTC values\n * by default,and getting a field value in local time is always explicit. As a shortcut, rTime.ms()\n * may be used to return a Time Value (ms) number instead of a Date object.\n * Note: It may not seem necessary for some fields, like \"year\", to have \"UTC\" and \"local\"\n * variations, but that starts to make a difference around December 31.\n * @module rTime\n */\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Entry point function accepts various forms of time information: Usual Date values - single\n * string describing full date/time; single number (Time Value); a series of numbers\n * for date/time fields; a key/value object with time field names and numeric values. Has\n * object properties \"get\", \"getUTC\" (just an alias of \"get\"), and \"getLocal\" to group accessor\n * functions. Also has an \"ms()\" function property to return a Time Value instead of a Date object\n *\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n *\n * @return {Date} new Date(), created using arguments. Will be \"Invalid Date\" object\n *   if arguments don't eventually resolve to a real date\n *\n * @example\n * // all return the same as new Date() would\n * rTime();\n * rTime({});\n * rTime([]);\n *\n * @example\n * // both return the same as Date.now()\n * rTime.ms();\n * rTime.get.timeValue(rTime());\n *\n * @example\n * <caption>The following, when called in 2016 within the eastern time zone,\n * returns \"Date 2016-02-01T16:00:00.000Z\" (in Firefox. Chrome and Edge always\n * report the local conversion)</caption>\n * // equivalent to new Date(2016, 1, 1, 11)\n * rTime({\n * \tmonth: 2,\n * \thour: 11\n * });\n */\n// eslint-enable valid-jsdoc\nexport default function rTime(...timeArgs) {\n\tconst numberOfArgs = timeArgs.length;\n\tconst firstArg = timeArgs[0];\n\tconst firstArgType = typeof firstArg;\n\n\t// exception to date alias approach: if the only argument is a number less\n\t// than 10,000 (arbitrary), treat it as a year rather than a time value (ms)\n\tif (numberOfArgs === 1\n\t\t&& firstArgType === 'number'\n\t\t&& firstArg < 10000) {\n\t\treturn new Date(firstArg, 0);\n\t}\n\n\t// simplest version. will return invalid date object if doesn't conform to one\n\t// of these patterns:\n\t// - Time Value (ms since 1970 UTC)\n\t// - `new Date( YYYY, MM, DD, HH, MM, SS, MS )`\n\t// - null\n\tif (numberOfArgs > 1\n\t\t|| firstArgType === 'number'\n\t\t|| firstArg === null) {\n\t\treturn new Date(...timeArgs);\n\t}\n\n\t// single valid arg - either an array of values to try as args, a field/value hash,\n\t// or string, possibly user input\n\tif (numberOfArgs === 1) {\n\t\t// allow an array, why not. Recurse.\n\t\tif (Array.isArray(firstArg)) {\n\t\t\treturn rTime(...firstArg);\n\t\t}\n\n\t\t// date/time string - valid, or returns Invalid Date object\n\t\tif (firstArgType === 'string') {\n\t\t\treturn new Date(firstArg);\n\t\t}\n\t}\n\n\tif (numberOfArgs > 0 && firstArgType === 'object') {\n\t\t// plain object (non-Array, non-Null, non-Date) is a field/value hash\n\t\tif (Object.keys(firstArg).length) {\n\t\t\treturn makeTimeFromFields(...timeArgs);\n\t\t}\n\t}\n\n\tif (numberOfArgs === 0) {\n\t\treturn new Date();\n\t}\n\n\t// one weird arg (existing date object, bool, ?)\n\treturn new Date('invalid');\n}\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Same as rTime(), but returns a Time Value rather than a Date\n * @function ms\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n * @return {number}\n *         Time Value (ms since 01/01/1970 UTC)\n */\n// eslint-enable valid-jsdoc\nrTime.ms = function ms(...timeArgs) {\n\treturn rTime.get.timeInMs(\n\t\trTime(...timeArgs)\n\t);\n};\n\n/**\n * Object format to make new Date()s out of partial bits of information\n * @typedef {Object} timeFieldHash\n * @property {number} year four digits\n * @property {number} month 1-12\n * @property {number} dayOfMonth 1-31\n * @property {number} hour 0-23\n * @property {number} minute 0-59\n * @property {number} second 0-59\n * @property {number} ms millisecond 0-999\n * @property {boolean} isUTC new time should be in UTC rather than local\n */\n\n/**\n * Generates new Date object with incomplete information. Follows one rule: From\n * longest to shortest (year -> ms), use a fallback for unspecified fields. Until a field has been\n * specified, use the current time. Afterward, use either 0 (most fields) or 1 (month, dayOfMonth).\n * @protected\n * @param {...timeFieldHash} fieldHashes\n *         One or more hashes of field names and values. Note \"day\",\n * \"dayOfMonth\", and \"ms\" fields rather than \"day\", \"date\", and \"milliseconds\". The first two are\n * ambiguous, and \"ms\" is just much easier and a well-used abbreviation\n *\n * @throws Will throw if there are no objects passed (empty object(s) are okay - returns new Date())\n *\n * @return {Date} new Date() created with values from all hashes. Will create in UTC time\n * (equivalent to new Date(Date.UTC())) one of the hashes includes: \"isUTC\": true\n */\nfunction makeTimeFromFields(...fieldHashes) {\n\tif (fieldHashes.length === 0) {\n\t\tthrow new Error('making time from fields requires at least one fields object.'\n\t\t\t+ 'This should never trigger, as it is only called internally.');\n\t}\n\tconst nowDate = new Date();\n\tconst allFields = fieldHashes\n\t\t.reduce((accumulator, hash) => {\n\t\t\tif (typeof hash === 'object'\n\t\t\t\t&& !Array.isArray(hash)\n\t\t\t\t&& hash !== null\n\t\t\t\t&& Object.keys(hash).length > 0\n\t\t\t) {\n\t\t\t\treturn Object.assign({}, accumulator, hash);\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\n\tif (Object.keys(allFields).length === 0) {\n\t\treturn nowDate;\n\t}\n\n\tconst { get } = rTime;\n\tconst nowValues = {\n\t\tyear: get.year(nowDate),\n\t\tmonth: get.month(nowDate),\n\t\tdayOfMonth: get.dayOfMonth(nowDate),\n\t\thour: get.hour(nowDate),\n\t\tminute: get.minute(nowDate),\n\t\tsecond: get.second(nowDate),\n\t\tms: get.ms(nowDate),\n\t};\n\n\tfunction reduceFields({ prevDoUseMinVal, latestValues, defaults }, fieldName) {\n\t\tconst newFieldVal = (allFields[fieldName] !== undefined)\n\t\t\t? { [fieldName]: allFields[fieldName] }\n\t\t\t: {};\n\n\t\tconst doUseMinVal = (prevDoUseMinVal === true)\n\t\t\t? true\n\t\t\t: !!Object.keys(newFieldVal).length;\n\n\t\t// work around JS treating days and months like they're zero-based\n\t\tconst minFieldValue = (fieldName === 'month' || fieldName === 'dayOfMonth')\n\t\t\t? 1\n\t\t\t: 0;\n\n\t\tconst fallbackValue = (doUseMinVal === true)\n\t\t\t? { [fieldName]: minFieldValue }\n\t\t\t: { [fieldName]: defaults[fieldName] };\n\n\t\treturn {\n\t\t\tprevDoUseMinVal: doUseMinVal,\n\t\t\tlatestValues: Object.assign({}, latestValues, fallbackValue, newFieldVal),\n\t\t\tdefaults,\n\t\t};\n\t}\n\n\tconst fullValues = Object.keys(nowValues)\n\t\t.reduce(reduceFields, {\n\t\t\tprevDoUseMinVal: false,\n\t\t\tlatestValues: {},\n\t\t\tdefaults: nowValues,\n\t\t});\n\n\tconst {\n\t\tyear,\n\t\tmonth,\n\t\tdayOfMonth,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tms,\n\t} = fullValues.latestValues;\n\n\tif (allFields.isUTC) {\n\t\t// convert month number to zero-based\n\t\treturn new Date(Date.UTC(year, month - 1, dayOfMonth, hour, minute, second, ms));\n\t}\n\n\t// convert month number to zero-based\n\treturn new Date(year, month - 1, dayOfMonth, hour, minute, second, ms);\n}\n\n/**\n * Holds function properties for extracting individual values from a given date in UTC time.\n * All return values are retrieved using Date.prototype.getUTC[field](). Has an alias\n * called \"getUTC\"\n * @see  rTime~getUTC\n * @namespace rTime~get\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.get.year(someDate)\n */\nrTime.get = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began\n\t * @memberof! rTime~get\n\t * @param {Date} d Any Date object\n\t * @return {number} milliseconds since Unix epoch\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime();\n\t},\n\n\t/**\n\t * Get the millenium of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1+ digit millenium\n\t */\n\tmillenium(d) {\n\t\tconst year = d.getUTCFullYear();\n\n\t\t// we consider the year 2000 to be the 21st century, not gonna argue\n\t\tconst rawMillenia = (year + 1) / 1000;\n\n\t\treturn Math.ceil(rawMillenia);\n\t},\n\n\t/**\n\t * Get the century of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1+ digit century\n\t */\n\tcentury(d) {\n\t\tconst year = d.getUTCFullYear();\n\t\tconst rawCenturiesNextYear = (year + 1) / 100;\n\t\tconst saneCenturyNextYear = Math.ceil(rawCenturiesNextYear);\n\n\t\treturn saneCenturyNextYear;\n\t},\n\n\t/**\n\t * Get the year of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getUTCFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn d.getUTCMonth() + 1;\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getUTCDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getUTCDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getUTCHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tminute(d) {\n\t\treturn d.getUTCMinutes();\n\t},\n\n\t/**\n\t * Get the second of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tsecond(d) {\n\t\treturn d.getUTCSeconds();\n\t},\n\n\t/**\n\t * Get the millisecond (ms) of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t */\n\tms(d) {\n\t\treturn d.getUTCMilliseconds();\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~get.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~get.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~get.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n\n/**\n * Alias of \"get\"\n * @namespace rTime~getUTC\n * @see rTime~get\n */\nrTime.getUTC = rTime.get;\n\n/**\n * Holds function properties for extracting individual values from a given date in Local Time.\n * All return values are converted from UTC to in the user's current time zone, using the built-in\n * Date.prototype.get[field] function.\n * @namespace rTime~getLocal\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.getLocal.year(someDate)\n *\n * @example\n * // how many hours to add to convert a specified time from \"local\" to \"fixed\"\n * // (useful for showing the time a user originally entered regardless of time zone, by both\n * // storing the time in UTC and displaying in UTC)\n * rTime.getLocal.hoursToUTC(someDate)\n */\nrTime.getLocal = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began, converted to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch (adusted to local)\n\t * @example\n\t * // rTime\n\t * rTime.getLocal.timeValue(d);\n\t * // vanilla\n\t * d.time() - (d.getTimezoneOffset() * 60 * 1000);\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime() + this.msFromUTC(d);\n\t},\n\n\t/**\n\t * Get the year of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date according to local time.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn d.getMonth() + 1;\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getHours();\n\t},\n\n\t/**\n\t * Get the number of milliseconds from the local timezone to UTC for a given Date object.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t *\n\t * @example\n\t * // When called from Ohio, which is GMT-5, or GMT-4 during daylight savings\n\t * // (useful as ms with Time Values, converted to hours here to read)\n\t * rTime.get.msToUTC(rTime({\"month\": 2})) / 1000 / 60 / 60;\n\t * // -> 5\n\t * rTime.get.msToUTC(rTime({\"month\": 7})) / 1000 / 60 / 60;\n\t * // -> 4\n\t */\n\tmsToUTC(d) {\n\t\treturn d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesToUTC(d) {\n\t\treturn d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursToUTC(d) {\n\t\treturn d.getTimezoneOffset() / 60;\n\t},\n\n\t/**\n\t * Get the number of milliseconds from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t */\n\tmsFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesFromUTC(d) {\n\t\treturn -d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() / 60;\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~getLocal.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~getLocal.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~getLocal.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~getLocal.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~getLocal.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n"],"sourceRoot":"/source/"}