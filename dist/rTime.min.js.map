{"version":3,"sources":["rTime.js"],"names":["global","factory","define","amd","exports","mod","rTime","this","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_len","arguments","timeArgs","_key","numberOfArgs","firstArg","firstArgType","_typeof","Date","apply","undefined","getExpectedDateFromString","month","adjustMonthToDate","Function","prototype","bind","concat","slice","keys","makeTimeFromFields","adjustMonthFromDate","dateString","rawDate","isISO","test","getTime","getTimezoneOffset","reduceFields","_ref","fieldName","prevDoUseMinValue","latestValues","defaults","rawFieldValue","allFields","newFieldValue","getLocal","newFieldObject","doUseMinValue","minFieldValue","fallbackValue","_extends","_len2","fieldHashes","_key2","Error","nowDate","reduce","accumulator","hash","nowValues","year","dayOfMonth","hour","minute","second","ms","fullValues","_fullValues$latestVal","isUTC","UTC","assign","target","source","hasOwnProperty","call","Symbol","iterator","constructor","now","get","timeInMs","timeValue","d","getUTCFullYear","getUTCMonth","getUTCDate","day","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","time","fullYear","date","dayOfWeek","hours","minutes","seconds","milliseconds","millisecond","timezoneOffset","minutesToUTC","getUTC","getFullYear","getMonth","getDate","getDay","getHours","msToUTC","hoursToUTC","msFromUTC","minutesFromUTC","hoursFromUTC"],"mappings":"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","file":"rTime.min.js","sourcesContent":["/**\n * Create and interact with JS Date objects consistently and easily. rTime is\n * a static, low-level library that uses and returns standard JS Date objects. It has no state,\n * and there is no \"rTime\" type. You're dealing with the same old object, just via a less\n * ambiguous and confusing interface. Compared to vanilla Date, rTime:\n * Allows creating a new Date without manually specifying every field,\n * such as when only time of day matters. Accepts broader string formats. Provides additional\n * straightforward UTC <-> Local time zone helpers. Disambiguates some field names (but aliases in\n * original names to prevent frustration). Makes months one-based. Always returns UTC values\n * by default,and getting a field value in local time is always explicit. As a shortcut, rTime.ms()\n * may be used to return a Time Value (ms) number instead of a Date object.\n * Note: It may not seem necessary for some fields, like \"year\", to have \"UTC\" and \"local\"\n * variations, but that starts to make a difference around December 31.\n * @module rTime\n */\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Entry point function accepts various forms of time information: Usual Date values - single\n * string describing full date/time; single number (Time Value); a series of numbers\n * for date/time fields; a key/value object with time field names and numeric values. Has\n * object properties \"get\", \"getUTC\" (just an alias of \"get\"), and \"getLocal\" to group accessor\n * functions. Also has an \"ms()\" function property to return a Time Value instead of a Date object\n *\n * @param {(string|...number|...timeFieldHash|Date)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n *\n * @return {Date} new Date(), created using arguments. Will be \"Invalid Date\" object\n *   if arguments don't eventually resolve to a real date\n *\n * @example\n * // all return the same as new Date() would\n * rTime();\n * rTime({});\n * rTime([]);\n *\n * @example\n * // both return the same as Date.now()\n * rTime.ms();\n * rTime.get.timeValue(rTime());\n *\n * @example\n * <caption>The following, when called in 2016 within the eastern time zone,\n * returns \"Date 2016-02-01T16:00:00.000Z\" (in Firefox. Chrome and Edge always\n * report the local conversion)</caption>\n * // equivalent to new Date(2016, 1, 1, 11)\n * rTime({\n * \tmonth: 2,\n * \thour: 11\n * });\n */\n// eslint-enable valid-jsdoc\nexport default function rTime(...timeArgs) {\n\tconst numberOfArgs = timeArgs.length;\n\tconst firstArg = timeArgs[0];\n\tconst firstArgType = typeof firstArg;\n\n\tif (numberOfArgs === 0\n\t\t|| firstArg === null) {\n\t\treturn new Date();\n\t}\n\n\t// single valid arg - either an array of values to try as args, a timeFieldHash,\n\t// or string, possibly user input\n\tif (numberOfArgs === 1) {\n\t\t// rTime(aDate) just returns the date\n\t\tif (firstArg instanceof Date) {\n\t\t\treturn firstArg;\n\t\t}\n\n\t\t// allow an array, why not. Recurse.\n\t\tif (Array.isArray(firstArg)) {\n\t\t\treturn rTime(...firstArg);\n\t\t}\n\n\t\t// date/time string - valid, or returns Invalid Date object\n\t\tif (firstArgType === 'string') {\n\t\t\treturn getExpectedDateFromString(firstArg);\n\t\t}\n\n\t\tif (firstArgType === 'number') {\n\t\t\t// exception to date rules: if the only argument is a number less\n\t\t\t// than five digits, treat it as a year rather than a time value (ms)\n\t\t\tif (firstArg < 10000) {\n\t\t\t\treturn new Date(firstArg, 0);\n\t\t\t}\n\n\t\t\treturn new Date(firstArg);\n\t\t}\n\t}\n\n\tif (numberOfArgs > 1) {\n\t\tif (firstArgType === 'number') {\n\t\t\tconst month = adjustMonthToDate(timeArgs[1]);\n\n\t\t\treturn new Date(firstArg, month, ...timeArgs.slice(2));\n\t\t}\n\n\t\t// TODO: first arg object, second arg array\n\t\t// TODO: arrays(contents following above object, array format)\n\t}\n\n\t// one or more args made it through the filters\n\tif (firstArgType === 'object') {\n\t\t// plain object (non-Array, non-Null, non-Date) is a timeFieldHash\n\t\tif (Object.keys(firstArg).length) {\n\t\t\treturn makeTimeFromFields(...timeArgs);\n\t\t}\n\n\t\treturn new Date();\n\t}\n\n\treturn new Date('one or more invalid arguments');\n}\n\nfunction adjustMonthToDate(month) {\n\t// e.g. if the user puts in 3, they mean March not April\n\treturn month - 1;\n}\n\nfunction adjustMonthFromDate(month) {\n\t// if rTime retrieves a month from a date, that number is low by 1\n\treturn month + 1;\n}\n\nfunction getExpectedDateFromString(dateString) {\n\t// date/time from strings breaks with typical `new Date() behavior`:\n\t// - month is correct\n\t// - IF string is ISO format, it creates in UTC time rather than local\n\tconst rawDate = new Date(dateString);\n\tconst isISO = /^\\d{4,6}-\\d{2}-\\d{2}$/.test(dateString);\n\n\treturn isISO\n\t\t? new Date(rawDate.getTime() + (rawDate.getTimezoneOffset() * 60 * 1000))\n\t\t: rawDate;\n}\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Same as rTime(), but returns a Time Value rather than a Date\n * @function ms\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n * @return {number}\n *         Time Value (ms since 01/01/1970 UTC)\n */\n// eslint-enable valid-jsdoc\nrTime.ms = function ms(...timeArgs) {\n\tif (timeArgs.length === 0) {\n\t\treturn Date.now();\n\t}\n\n\treturn rTime.get.timeInMs(\n\t\trTime(...timeArgs)\n\t);\n};\n\n/**\n * Object format to make new Date()s out of partial bits of information\n * @typedef {Object} timeFieldHash\n * @property {number|Date} year four digits or a date to extract that value from\n * @property {number|Date} month 1-12 or a date to extract that value from\n * @property {number|Date} dayOfMonth 1-31 or a date to extract that value from\n * @property {number|Date} hour 0-23 or a date to extract that value from\n * @property {number|Date} minute 0-59 or a date to extract that value from\n * @property {number|Date} second 0-59 or a date to extract that value from\n * @property {number|Date} ms millisecond 0-999 or a date to extract that value from\n * @property {boolean} isUTC new time should be in UTC rather than local\n */\n\n/**\n * Generates new Date object with incomplete information. Follows one rule: From\n * longest to shortest (year -> ms), use a fallback for unspecified fields. Until a field has been\n * specified, use the current time. Afterward, use either 0 (most fields) or 1 (month, dayOfMonth).\n * @protected\n * @param {...timeFieldHash} fieldHashes\n *         One or more hashes of field names and values. Note \"day\",\n * \"dayOfMonth\", and \"ms\" fields rather than \"day\", \"date\", and \"milliseconds\". The first two are\n * ambiguous, and \"ms\" is just much easier and a well-used abbreviation\n *\n * @throws Will throw if there are no objects passed (empty object(s) are okay - returns new Date())\n *\n * @return {Date} new Date() created with values from all hashes. Will create in UTC time\n * (equivalent to new Date(Date.UTC())) one of the hashes includes: \"isUTC\": true\n */\nfunction makeTimeFromFields(...fieldHashes) {\n\tif (fieldHashes.length === 0) {\n\t\tthrow new Error('making time from fields requires at least one fields object.'\n\t\t\t+ 'This should never trigger, as it is only called internally.');\n\t}\n\tconst nowDate = new Date();\n\tconst allFields = fieldHashes\n\t\t.reduce((accumulator, hash) => {\n\t\t\tif (typeof hash === 'object'\n\t\t\t\t&& !Array.isArray(hash)\n\t\t\t\t&& hash !== null\n\t\t\t\t&& Object.keys(hash).length > 0\n\t\t\t) {\n\t\t\t\treturn Object.assign({}, accumulator, hash);\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\n\tif (Object.keys(allFields).length === 0) {\n\t\treturn nowDate;\n\t}\n\n\tconst { getLocal } = rTime;\n\tconst nowValues = {\n\t\tyear: getLocal.year(nowDate),\n\t\tmonth: getLocal.month(nowDate),\n\t\tdayOfMonth: getLocal.dayOfMonth(nowDate),\n\t\thour: getLocal.hour(nowDate),\n\t\tminute: getLocal.minute(nowDate),\n\t\tsecond: getLocal.second(nowDate),\n\t\tms: getLocal.ms(nowDate),\n\t};\n\n\tfunction reduceFields({ prevDoUseMinValue, latestValues, defaults }, fieldName) {\n\t\tconst rawFieldValue = allFields[fieldName];\n\t\tconst newFieldValue = rawFieldValue instanceof Date\n\t\t\t\t? getLocal[fieldName](rawFieldValue)\n\t\t\t\t: rawFieldValue;\n\t\tconst newFieldObject = newFieldValue ? { [fieldName]: newFieldValue } : {};\n\n\t\tconst doUseMinValue = prevDoUseMinValue\n\t\t\t? true\n\t\t\t: !!newFieldValue;\n\n\t\t// work around JS treating days and months like they're zero-based\n\t\tconst minFieldValue = (fieldName === 'month' || fieldName === 'dayOfMonth')\n\t\t\t? 1\n\t\t\t: 0;\n\n\t\tconst fallbackValue = (doUseMinValue === true)\n\t\t\t? { [fieldName]: minFieldValue }\n\t\t\t: { [fieldName]: defaults[fieldName] };\n\n\t\treturn {\n\t\t\tprevDoUseMinValue: doUseMinValue,\n\t\t\tlatestValues: Object.assign({}, latestValues, fallbackValue, newFieldObject),\n\t\t\tdefaults,\n\t\t};\n\t}\n\n\tconst fullValues = Object.keys(nowValues)\n\t\t.reduce(reduceFields, {\n\t\t\tprevDoUseMinValue: false,\n\t\t\tlatestValues: {},\n\t\t\tdefaults: nowValues,\n\t\t});\n\n\tconst {\n\t\tyear,\n\t\tmonth,\n\t\tdayOfMonth,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tms,\n\t} = fullValues.latestValues;\n\n\tif (allFields.isUTC) {\n\t\t// convert month number to zero-based\n\t\treturn new Date(Date.UTC(year, adjustMonthToDate(month), dayOfMonth, hour, minute, second, ms));\n\t}\n\n\t// convert month number to zero-based\n\treturn new Date(year, adjustMonthToDate(month), dayOfMonth, hour, minute, second, ms);\n}\n\n/**\n * Holds function properties for extracting individual values from a given date in UTC time.\n * All return values are retrieved using Date.prototype.getUTC[field](). Has an alias\n * called \"getUTC\"\n * @see  rTime~getUTC\n * @namespace rTime~get\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.get.year(someDate)\n */\nrTime.get = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began\n\t * @memberof! rTime~get\n\t * @param {Date} d Any Date object\n\t * @return {number} milliseconds since Unix epoch\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime();\n\t},\n\n\t/**\n\t * Get the year of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getUTCFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn adjustMonthFromDate(d.getUTCMonth());\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getUTCDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getUTCDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getUTCHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tminute(d) {\n\t\treturn d.getUTCMinutes();\n\t},\n\n\t/**\n\t * Get the second of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tsecond(d) {\n\t\treturn d.getUTCSeconds();\n\t},\n\n\t/**\n\t * Get the millisecond (ms) of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t */\n\tms(d) {\n\t\treturn d.getUTCMilliseconds();\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~get.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~get.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~get.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n\n/**\n * Alias of \"get\"\n * @namespace rTime~getUTC\n * @see rTime~get\n */\nrTime.getUTC = rTime.get;\n\n/**\n * Holds function properties for extracting individual values from a given date in Local Time.\n * All return values are converted from UTC to in the user's current time zone, using the built-in\n * Date.prototype.get[field] function.\n * @namespace rTime~getLocal\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.getLocal.year(someDate)\n *\n * @example\n * // how many hours to add to convert a specified time from \"local\" to \"fixed\"\n * // (useful for showing the time a user originally entered regardless of time zone, by both\n * // storing the time in UTC and displaying in UTC)\n * rTime.getLocal.hoursToUTC(someDate)\n */\nrTime.getLocal = {\n\t/**\n\t * Get the year of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date according to local time.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn adjustMonthFromDate(d.getMonth());\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object. Alias of get.minute\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\tminute(d) {\n\t\treturn rTime.get.minute(d);\n\t},\n\n\t/**\n\t * Get the second of a given Date object. Alias of get.second\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\tsecond(d) {\n\t\treturn rTime.get.second(d);\n\t},\n\n\t/**\n\t * Get the ms (millisecond) of a given Date object. Alias of get.millisecond\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\tms(d) {\n\t\treturn rTime.get.ms(d);\n\t},\n\n\t/**\n\t * Get the number of milliseconds from the local timezone to UTC for a given Date object.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t *\n\t * @example\n\t * // When called from Ohio, which is GMT-5, or GMT-4 during daylight savings\n\t * // (useful as ms with Time Values, converted to hours here to read)\n\t * rTime.get.msToUTC(rTime({\"month\": 2})) / 1000 / 60 / 60;\n\t * // -> 5\n\t * rTime.get.msToUTC(rTime({\"month\": 7})) / 1000 / 60 / 60;\n\t * // -> 4\n\t */\n\tmsToUTC(d) {\n\t\treturn d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesToUTC(d) {\n\t\treturn d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursToUTC(d) {\n\t\treturn d.getTimezoneOffset() / 60;\n\t},\n\n\t/**\n\t * Get the number of milliseconds from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t */\n\tmsFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesFromUTC(d) {\n\t\treturn -d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() / 60;\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~getLocal.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~getLocal.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~getLocal.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n"],"sourceRoot":"/source/"}