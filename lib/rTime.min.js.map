{"version":3,"sources":["rTime.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","rTime","_len","arguments","timeArgs","_key","numberOfArgs","firstArg","firstArgType","_typeof","Date","Function","prototype","bind","apply","concat","undefined","keys","makeTimeFromFields","reduceFields","_ref","fieldName","prevDoUseMinVal","latestValues","defaults","newFieldVal","allFields","doUseMinVal","minFieldValue","fallbackValue","_extends","_len2","fieldHashes","_key2","Error","nowDate","reduce","accumulator","hash","get","nowValues","year","month","dayOfMonth","hour","minute","second","ms","fullValues","_fullValues$latestVal","isUTC","UTC","exports","assign","target","source","hasOwnProperty","call","Symbol","iterator","constructor","timeInMs","timeValue","d","getTime","millenium","getUTCFullYear","rawMillenia","Math","ceil","century","rawCenturiesNextYear","saneCenturyNextYear","getUTCMonth","getUTCDate","day","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","this","time","fullYear","date","dayOfWeek","hours","minutes","seconds","milliseconds","millisecond","timezoneOffset","getLocal","minutesToUTC","getUTC","msFromUTC","getFullYear","getMonth","getDate","getDay","getHours","msToUTC","getTimezoneOffset","hoursToUTC","minutesFromUTC","hoursFromUTC"],"mappings":"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","file":"rTime.min.js","sourcesContent":["/**\n * Create and interact with JS Date objects consistently and easily. rTime is\n * a static, low-level library that uses and returns standard JS Date objects. It has no state,\n * and there is no \"rTime\" type. You're dealing with the same old object, just via a less\n * ambiguous and confusing interface. Compared to vanilla Date, rTime:\n * Allows creating a new Date without manually specifying every field,\n * such as when only time of day matters. Accepts broader string formats. Provides additional\n * straightforward UTC <-> Local time zone helpers. Disambiguates some field names (but aliases in\n * original names to prevent frustration). Makes months one-based. Always returns UTC values\n * by default,and getting a field value in local time is always explicit. As a shortcut, rTime.ms()\n * may be used to return a Time Value (ms) number instead of a Date object.\n * Note: It may not seem necessary for some fields, like \"year\", to have \"UTC\" and \"local\"\n * variations, but that starts to make a difference around December 31.\n * @module rTime\n */\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Entry point function accepts various forms of time information: Usual Date values - single\n * string describing full date/time; single number (Time Value); a series of numbers\n * for date/time fields; a key/value object with time field names and numeric values. Has\n * object properties \"get\", \"getUTC\" (just an alias of \"get\"), and \"getLocal\" to group accessor\n * functions. Also has an \"ms()\" function property to return a Time Value instead of a Date object\n *\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n *\n * @return {Date} new Date(), created using arguments. Will be \"Invalid Date\" object\n *   if arguments don't eventually resolve to a real date\n *\n * @example\n * // all return the same as new Date() would\n * rTime();\n * rTime({});\n * rTime([]);\n *\n * @example\n * // both return the same as Date.now()\n * rTime.ms();\n * rTime.get.timeValue(rTime());\n *\n * @example\n * <caption>The following, when called in 2016 within the eastern time zone,\n * returns \"Date 2016-02-01T16:00:00.000Z\" (in Firefox. Chrome and Edge always\n * report the local conversion)</caption>\n * // equivalent to new Date(2016, 1, 1, 11)\n * rTime({\n * \tmonth: 2,\n * \thour: 11\n * });\n */\n// eslint-enable valid-jsdoc\nexport default function rTime(...timeArgs) {\n\tconst numberOfArgs = timeArgs.length;\n\tconst firstArg = timeArgs[0];\n\tconst firstArgType = typeof firstArg;\n\n\t// exception to date alias approach: if the only argument is a number less\n\t// than 10,000 (arbitrary), treat it as a year rather than a time value (ms)\n\tif (numberOfArgs === 1\n\t\t&& firstArgType === 'number'\n\t\t&& firstArg < 10000) {\n\t\treturn new Date(firstArg, 0);\n\t}\n\n\t// simplest version. will return invalid date object if doesn't conform to one\n\t// of these patterns:\n\t// - Time Value (ms since 1970 UTC)\n\t// - `new Date( YYYY, MM, DD, HH, MM, SS, MS )`\n\t// - null\n\tif (numberOfArgs > 1\n\t\t|| firstArgType === 'number'\n\t\t|| firstArg === null) {\n\t\treturn new Date(...timeArgs);\n\t}\n\n\t// single valid arg - either an array of values to try as args, a field/value hash,\n\t// or string, possibly user input\n\tif (numberOfArgs === 1) {\n\t\t// allow an array, why not. Recurse.\n\t\tif (Array.isArray(firstArg)) {\n\t\t\treturn rTime(...firstArg);\n\t\t}\n\n\t\t// date/time string - valid, or returns Invalid Date object\n\t\tif (firstArgType === 'string') {\n\t\t\treturn new Date(firstArg);\n\t\t}\n\t}\n\n\tif (numberOfArgs > 0 && firstArgType === 'object') {\n\t\t// plain object (non-Array, non-Null, non-Date) is a field/value hash\n\t\tif (Object.keys(firstArg).length) {\n\t\t\treturn makeTimeFromFields(...timeArgs);\n\t\t}\n\t}\n\n\tif (numberOfArgs === 0) {\n\t\treturn new Date();\n\t}\n\n\t// one weird arg (existing date object, bool, ?)\n\treturn new Date('invalid');\n}\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Same as rTime(), but returns a Time Value rather than a Date\n * @function ms\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n * @return {number}\n *         Time Value (ms since 01/01/1970 UTC)\n */\n// eslint-enable valid-jsdoc\nrTime.ms = function ms(...timeArgs) {\n\treturn rTime.get.timeInMs(\n\t\trTime(...timeArgs)\n\t);\n};\n\n/**\n * Object format to make new Date()s out of partial bits of information\n * @typedef {Object} timeFieldHash\n * @property {number} year four digits\n * @property {number} month 1-12\n * @property {number} dayOfMonth 1-31\n * @property {number} hour 0-23\n * @property {number} minute 0-59\n * @property {number} second 0-59\n * @property {number} ms millisecond 0-999\n * @property {boolean} isUTC new time should be in UTC rather than local\n */\n\n/**\n * Generates new Date object with incomplete information. Follows one rule: From\n * longest to shortest (year -> ms), use a fallback for unspecified fields. Until a field has been\n * specified, use the current time. Afterward, use either 0 (most fields) or 1 (month, dayOfMonth).\n * @protected\n * @param {...timeFieldHash} fieldHashes\n *         One or more hashes of field names and values. Note \"day\",\n * \"dayOfMonth\", and \"ms\" fields rather than \"day\", \"date\", and \"milliseconds\". The first two are\n * ambiguous, and \"ms\" is just much easier and a well-used abbreviation\n *\n * @throws Will throw if there are no objects passed (empty object(s) are okay - returns new Date())\n *\n * @return {Date} new Date() created with values from all hashes. Will create in UTC time\n * (equivalent to new Date(Date.UTC())) one of the hashes includes: \"isUTC\": true\n */\nfunction makeTimeFromFields(...fieldHashes) {\n\tif (fieldHashes.length === 0) {\n\t\tthrow new Error('making time from fields requires at least one fields object.'\n\t\t\t+ 'This should never trigger, as it is only called internally.');\n\t}\n\tconst nowDate = new Date();\n\tconst allFields = fieldHashes\n\t\t.reduce((accumulator, hash) => {\n\t\t\tif (typeof hash === 'object'\n\t\t\t\t&& !Array.isArray(hash)\n\t\t\t\t&& hash !== null\n\t\t\t\t&& Object.keys(hash).length > 0\n\t\t\t) {\n\t\t\t\treturn Object.assign({}, accumulator, hash);\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\n\tif (Object.keys(allFields).length === 0) {\n\t\treturn nowDate;\n\t}\n\n\tconst { get } = rTime;\n\tconst nowValues = {\n\t\tyear: get.year(nowDate),\n\t\tmonth: get.month(nowDate),\n\t\tdayOfMonth: get.dayOfMonth(nowDate),\n\t\thour: get.hour(nowDate),\n\t\tminute: get.minute(nowDate),\n\t\tsecond: get.second(nowDate),\n\t\tms: get.ms(nowDate),\n\t};\n\n\tfunction reduceFields({ prevDoUseMinVal, latestValues, defaults }, fieldName) {\n\t\tconst newFieldVal = (allFields[fieldName] !== undefined)\n\t\t\t? { [fieldName]: allFields[fieldName] }\n\t\t\t: {};\n\n\t\tconst doUseMinVal = (prevDoUseMinVal === true)\n\t\t\t? true\n\t\t\t: !!Object.keys(newFieldVal).length;\n\n\t\t// work around JS treating days and months like they're zero-based\n\t\tconst minFieldValue = (fieldName === 'month' || fieldName === 'dayOfMonth')\n\t\t\t? 1\n\t\t\t: 0;\n\n\t\tconst fallbackValue = (doUseMinVal === true)\n\t\t\t? { [fieldName]: minFieldValue }\n\t\t\t: { [fieldName]: defaults[fieldName] };\n\n\t\treturn {\n\t\t\tprevDoUseMinVal: doUseMinVal,\n\t\t\tlatestValues: Object.assign({}, latestValues, fallbackValue, newFieldVal),\n\t\t\tdefaults,\n\t\t};\n\t}\n\n\tconst fullValues = Object.keys(nowValues)\n\t\t.reduce(reduceFields, {\n\t\t\tprevDoUseMinVal: false,\n\t\t\tlatestValues: {},\n\t\t\tdefaults: nowValues,\n\t\t});\n\n\tconst {\n\t\tyear,\n\t\tmonth,\n\t\tdayOfMonth,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tms,\n\t} = fullValues.latestValues;\n\n\tif (allFields.isUTC) {\n\t\t// convert month number to zero-based\n\t\treturn new Date(Date.UTC(year, month - 1, dayOfMonth, hour, minute, second, ms));\n\t}\n\n\t// convert month number to zero-based\n\treturn new Date(year, month - 1, dayOfMonth, hour, minute, second, ms);\n}\n\n/**\n * Holds function properties for extracting individual values from a given date in UTC time.\n * All return values are retrieved using Date.prototype.getUTC[field](). Has an alias\n * called \"getUTC\"\n * @see  rTime~getUTC\n * @namespace rTime~get\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.get.year(someDate)\n */\nrTime.get = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began\n\t * @memberof! rTime~get\n\t * @param {Date} d Any Date object\n\t * @return {number} milliseconds since Unix epoch\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime();\n\t},\n\n\t/**\n\t * Get the millenium of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1+ digit millenium\n\t */\n\tmillenium(d) {\n\t\tconst year = d.getUTCFullYear();\n\n\t\t// we consider the year 2000 to be the 21st century, not gonna argue\n\t\tconst rawMillenia = (year + 1) / 1000;\n\n\t\treturn Math.ceil(rawMillenia);\n\t},\n\n\t/**\n\t * Get the century of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1+ digit century\n\t */\n\tcentury(d) {\n\t\tconst year = d.getUTCFullYear();\n\t\tconst rawCenturiesNextYear = (year + 1) / 100;\n\t\tconst saneCenturyNextYear = Math.ceil(rawCenturiesNextYear);\n\n\t\treturn saneCenturyNextYear;\n\t},\n\n\t/**\n\t * Get the year of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getUTCFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn d.getUTCMonth() + 1;\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getUTCDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getUTCDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getUTCHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tminute(d) {\n\t\treturn d.getUTCMinutes();\n\t},\n\n\t/**\n\t * Get the second of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tsecond(d) {\n\t\treturn d.getUTCSeconds();\n\t},\n\n\t/**\n\t * Get the millisecond (ms) of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t */\n\tms(d) {\n\t\treturn d.getUTCMilliseconds();\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~get.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~get.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~get.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n\n/**\n * Alias of \"get\"\n * @namespace rTime~getUTC\n * @see rTime~get\n */\nrTime.getUTC = rTime.get;\n\n/**\n * Holds function properties for extracting individual values from a given date in Local Time.\n * All return values are converted from UTC to in the user's current time zone, using the built-in\n * Date.prototype.get[field] function.\n * @namespace rTime~getLocal\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.getLocal.year(someDate)\n *\n * @example\n * // how many hours to add to convert a specified time from \"local\" to \"fixed\"\n * // (useful for showing the time a user originally entered regardless of time zone, by both\n * // storing the time in UTC and displaying in UTC)\n * rTime.getLocal.hoursToUTC(someDate)\n */\nrTime.getLocal = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began, converted to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch (adusted to local)\n\t * @example\n\t * // rTime\n\t * rTime.getLocal.timeValue(d);\n\t * // vanilla\n\t * d.time() - (d.getTimezoneOffset() * 60 * 1000);\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime() + this.msFromUTC(d);\n\t},\n\n\t/**\n\t * Get the year of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date according to local time.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn d.getMonth() + 1;\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getHours();\n\t},\n\n\t/**\n\t * Get the number of milliseconds from the local timezone to UTC for a given Date object.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t *\n\t * @example\n\t * // When called from Ohio, which is GMT-5, or GMT-4 during daylight savings\n\t * // (useful as ms with Time Values, converted to hours here to read)\n\t * rTime.get.msToUTC(rTime({\"month\": 2})) / 1000 / 60 / 60;\n\t * // -> 5\n\t * rTime.get.msToUTC(rTime({\"month\": 7})) / 1000 / 60 / 60;\n\t * // -> 4\n\t */\n\tmsToUTC(d) {\n\t\treturn d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesToUTC(d) {\n\t\treturn d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursToUTC(d) {\n\t\treturn d.getTimezoneOffset() / 60;\n\t},\n\n\t/**\n\t * Get the number of milliseconds from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t */\n\tmsFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesFromUTC(d) {\n\t\treturn -d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() / 60;\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~getLocal.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~getLocal.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~getLocal.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~getLocal.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~getLocal.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n"],"sourceRoot":"/source/"}