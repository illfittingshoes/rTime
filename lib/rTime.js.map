{"version":3,"sources":["rTime.js"],"names":[],"mappings":"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","file":"rTime.js","sourcesContent":["/**\n * Create and interact with JS Date objects consistently and easily. rTime is\n * a static, low-level library that uses and returns standard JS Date objects. It has no state,\n * and there is no \"rTime\" type. You're dealing with the same old object, just via a less\n * ambiguous and confusing interface. Compared to vanilla Date, rTime:\n * Allows creating a new Date without manually specifying every field,\n * such as when only time of day matters. Accepts broader string formats. Provides additional\n * straightforward UTC <-> Local time zone helpers. Disambiguates some field names (but aliases in\n * original names to prevent frustration). Makes months one-based. Always returns UTC values\n * by default,and getting a field value in local time is always explicit. As a shortcut, rTime.ms()\n * may be used to return a Time Value (ms) number instead of a Date object.\n * Note: It may not seem necessary for some fields, like \"year\", to have \"UTC\" and \"local\"\n * variations, but that starts to make a difference around December 31.\n * @module rTime\n */\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Entry point function accepts various forms of time information: Usual Date values - single\n * string describing full date/time; single number (Time Value); a series of numbers\n * for date/time fields; a key/value object with time field names and numeric values. Has\n * object properties \"get\", \"getUTC\" (just an alias of \"get\"), and \"getLocal\" to group accessor\n * functions. Also has an \"ms()\" function property to return a Time Value instead of a Date object\n *\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n *\n * @return {Date} new Date(), created using arguments. Will be \"Invalid Date\" object\n *   if arguments don't eventually resolve to a real date\n *\n * @example\n * // all return the same as new Date() would\n * rTime();\n * rTime({});\n * rTime([]);\n *\n * @example\n * // both return the same as Date.now()\n * rTime.ms();\n * rTime.get.timeValue(rTime());\n *\n * @example\n * <caption>The following, when called in 2016 within the eastern time zone,\n * returns \"Date 2016-02-01T16:00:00.000Z\" (in Firefox. Chrome and Edge always\n * report the local conversion)</caption>\n * // equivalent to new Date(2016, 1, 1, 11)\n * rTime({\n * \tmonth: 2,\n * \thour: 11\n * });\n */\n// eslint-enable valid-jsdoc\nexport default function rTime(...timeArgs) {\n\tconst numberOfArgs = timeArgs.length;\n\tconst firstArg = timeArgs[0];\n\tconst firstArgType = typeof firstArg;\n\n\t// exception to date alias approach: if the only argument is a number less\n\t// than 10,000 (arbitrary), treat it as a year rather than a time value (ms)\n\tif (numberOfArgs === 1\n\t\t&& firstArgType === 'number'\n\t\t&& firstArg < 10000) {\n\t\treturn new Date(firstArg, 0);\n\t}\n\n\t// simplest version. will return invalid date object if doesn't conform to one\n\t// of these patterns:\n\t// - Time Value (ms since 1970 UTC)\n\t// - `new Date( YYYY, MM, DD, HH, MM, SS, MS )`\n\t// - null\n\tif (numberOfArgs > 1\n\t\t|| firstArgType === 'number'\n\t\t|| firstArg === null) {\n\t\treturn new Date(...timeArgs);\n\t}\n\n\t// single valid arg - either an array of values to try as args, a field/value hash,\n\t// or string, possibly user input\n\tif (numberOfArgs === 1) {\n\t\t// allow an array, why not. Recurse.\n\t\tif (Array.isArray(firstArg)) {\n\t\t\treturn rTime(...firstArg);\n\t\t}\n\n\t\t// date/time string - valid, or returns Invalid Date object\n\t\tif (firstArgType === 'string') {\n\t\t\treturn new Date(firstArg);\n\t\t}\n\t}\n\n\tif (numberOfArgs > 0 && firstArgType === 'object') {\n\t\t// plain object (non-Array, non-Null, non-Date) is a field/value hash\n\t\tif (Object.keys(firstArg).length) {\n\t\t\treturn makeTimeFromFields(...timeArgs);\n\t\t}\n\t}\n\n\tif (numberOfArgs === 0) {\n\t\treturn new Date();\n\t}\n\n\t// one weird arg (existing date object, bool, ?)\n\treturn new Date('invalid');\n}\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Same as rTime(), but returns a Time Value rather than a Date\n * @function ms\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n * @return {number}\n *         Time Value (ms since 01/01/1970 UTC)\n */\n// eslint-enable valid-jsdoc\nrTime.ms = function ms(...timeArgs) {\n\treturn rTime.get.timeInMs(\n\t\trTime(...timeArgs)\n\t);\n};\n\n/**\n * Object format to make new Date()s out of partial bits of information\n * @typedef {Object} timeFieldHash\n * @property {number} year four digits\n * @property {number} month 1-12\n * @property {number} dayOfMonth 1-31\n * @property {number} hour 0-23\n * @property {number} minute 0-59\n * @property {number} second 0-59\n * @property {number} ms millisecond 0-999\n * @property {boolean} isUTC new time should be in UTC rather than local\n */\n\n/**\n * Generates new Date object with incomplete information. Follows one rule: From\n * longest to shortest (year -> ms), use a fallback for unspecified fields. Until a field has been\n * specified, use the current time. Afterward, use either 0 (most fields) or 1 (month, dayOfMonth).\n * @protected\n * @param {...timeFieldHash} fieldHashes\n *         One or more hashes of field names and values. Note \"day\",\n * \"dayOfMonth\", and \"ms\" fields rather than \"day\", \"date\", and \"milliseconds\". The first two are\n * ambiguous, and \"ms\" is just much easier and a well-used abbreviation\n *\n * @throws Will throw if there are no objects passed (empty object(s) are okay - returns new Date())\n *\n * @return {Date} new Date() created with values from all hashes. Will create in UTC time\n * (equivalent to new Date(Date.UTC())) one of the hashes includes: \"isUTC\": true\n */\nfunction makeTimeFromFields(...fieldHashes) {\n\tif (fieldHashes.length === 0) {\n\t\tthrow new Error('making time from fields requires at least one fields object.'\n\t\t\t+ 'This should never trigger, as it is only called internally.');\n\t}\n\tconst nowDate = new Date();\n\tconst allFields = fieldHashes\n\t\t.reduce((accumulator, hash) => {\n\t\t\tif (typeof hash === 'object'\n\t\t\t\t&& !Array.isArray(hash)\n\t\t\t\t&& hash !== null\n\t\t\t\t&& Object.keys(hash).length > 0\n\t\t\t) {\n\t\t\t\treturn Object.assign({}, accumulator, hash);\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\n\tif (Object.keys(allFields).length === 0) {\n\t\treturn nowDate;\n\t}\n\n\tconst { get } = rTime;\n\tconst nowValues = {\n\t\tyear: get.year(nowDate),\n\t\tmonth: get.month(nowDate),\n\t\tdayOfMonth: get.dayOfMonth(nowDate),\n\t\thour: get.hour(nowDate),\n\t\tminute: get.minute(nowDate),\n\t\tsecond: get.second(nowDate),\n\t\tms: get.ms(nowDate),\n\t};\n\n\tfunction reduceFields({ prevDoUseMinVal, latestValues, defaults }, fieldName) {\n\t\tconst newFieldVal = (allFields[fieldName] !== undefined)\n\t\t\t? { [fieldName]: allFields[fieldName] }\n\t\t\t: {};\n\n\t\tconst doUseMinVal = (prevDoUseMinVal === true)\n\t\t\t? true\n\t\t\t: !!Object.keys(newFieldVal).length;\n\n\t\t// work around JS treating days and months like they're zero-based\n\t\tconst minFieldValue = (fieldName === 'month' || fieldName === 'dayOfMonth')\n\t\t\t? 1\n\t\t\t: 0;\n\n\t\tconst fallbackValue = (doUseMinVal === true)\n\t\t\t? { [fieldName]: minFieldValue }\n\t\t\t: { [fieldName]: defaults[fieldName] };\n\n\t\treturn {\n\t\t\tprevDoUseMinVal: doUseMinVal,\n\t\t\tlatestValues: Object.assign({}, latestValues, fallbackValue, newFieldVal),\n\t\t\tdefaults,\n\t\t};\n\t}\n\n\tconst fullValues = Object.keys(nowValues)\n\t\t.reduce(reduceFields, {\n\t\t\tprevDoUseMinVal: false,\n\t\t\tlatestValues: {},\n\t\t\tdefaults: nowValues,\n\t\t});\n\n\tconst {\n\t\tyear,\n\t\tmonth,\n\t\tdayOfMonth,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tms,\n\t} = fullValues.latestValues;\n\n\tif (allFields.isUTC) {\n\t\t// convert month number to zero-based\n\t\treturn new Date(Date.UTC(year, month - 1, dayOfMonth, hour, minute, second, ms));\n\t}\n\n\t// convert month number to zero-based\n\treturn new Date(year, month - 1, dayOfMonth, hour, minute, second, ms);\n}\n\n/**\n * Holds function properties for extracting individual values from a given date in UTC time.\n * All return values are retrieved using Date.prototype.getUTC[field](). Has an alias\n * called \"getUTC\"\n * @see  rTime~getUTC\n * @namespace rTime~get\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.get.year(someDate)\n */\nrTime.get = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began\n\t * @memberof! rTime~get\n\t * @param {Date} d Any Date object\n\t * @return {number} milliseconds since Unix epoch\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime();\n\t},\n\n\t/**\n\t * Get the millenium of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1+ digit millenium\n\t */\n\tmillenium(d) {\n\t\tconst year = d.getUTCFullYear();\n\n\t\t// we consider the year 2000 to be the 21st century, not gonna argue\n\t\tconst rawMillenia = (year + 1) / 1000;\n\n\t\treturn Math.ceil(rawMillenia);\n\t},\n\n\t/**\n\t * Get the century of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1+ digit century\n\t */\n\tcentury(d) {\n\t\tconst year = d.getUTCFullYear();\n\t\tconst rawCenturiesNextYear = (year + 1) / 100;\n\t\tconst saneCenturyNextYear = Math.ceil(rawCenturiesNextYear);\n\n\t\treturn saneCenturyNextYear;\n\t},\n\n\t/**\n\t * Get the year of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getUTCFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn d.getUTCMonth() + 1;\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getUTCDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getUTCDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getUTCHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tminute(d) {\n\t\treturn d.getUTCMinutes();\n\t},\n\n\t/**\n\t * Get the second of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tsecond(d) {\n\t\treturn d.getUTCSeconds();\n\t},\n\n\t/**\n\t * Get the millisecond (ms) of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t */\n\tms(d) {\n\t\treturn d.getUTCMilliseconds();\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~get.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~get.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~get.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n\n/**\n * Alias of \"get\"\n * @namespace rTime~getUTC\n * @see rTime~get\n */\nrTime.getUTC = rTime.get;\n\n/**\n * Holds function properties for extracting individual values from a given date in Local Time.\n * All return values are converted from UTC to in the user's current time zone, using the built-in\n * Date.prototype.get[field] function.\n * @namespace rTime~getLocal\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.getLocal.year(someDate)\n *\n * @example\n * // how many hours to add to convert a specified time from \"local\" to \"fixed\"\n * // (useful for showing the time a user originally entered regardless of time zone, by both\n * // storing the time in UTC and displaying in UTC)\n * rTime.getLocal.hoursToUTC(someDate)\n */\nrTime.getLocal = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began, converted to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch (adusted to local)\n\t * @example\n\t * // rTime\n\t * rTime.getLocal.timeValue(d);\n\t * // vanilla\n\t * d.time() - (d.getTimezoneOffset() * 60 * 1000);\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime() + this.msFromUTC(d);\n\t},\n\n\t/**\n\t * Get the year of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date according to local time.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn d.getMonth() + 1;\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getHours();\n\t},\n\n\t/**\n\t * Get the number of milliseconds from the local timezone to UTC for a given Date object.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t *\n\t * @example\n\t * // When called from Ohio, which is GMT-5, or GMT-4 during daylight savings\n\t * // (useful as ms with Time Values, converted to hours here to read)\n\t * rTime.get.msToUTC(rTime({\"month\": 2})) / 1000 / 60 / 60;\n\t * // -> 5\n\t * rTime.get.msToUTC(rTime({\"month\": 7})) / 1000 / 60 / 60;\n\t * // -> 4\n\t */\n\tmsToUTC(d) {\n\t\treturn d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesToUTC(d) {\n\t\treturn d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursToUTC(d) {\n\t\treturn d.getTimezoneOffset() / 60;\n\t},\n\n\t/**\n\t * Get the number of milliseconds from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t */\n\tmsFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesFromUTC(d) {\n\t\treturn -d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() / 60;\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~getLocal.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~getLocal.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~getLocal.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~getLocal.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~getLocal.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n"],"sourceRoot":"/source/"}