{"version":3,"sources":["rTime.js"],"names":[],"mappings":"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","file":"rTime.js","sourcesContent":["/**\n * Create and interact with JS Date objects consistently and easily. rTime is\n * a static, low-level library that uses and returns standard JS Date objects. It has no state,\n * and there is no \"rTime\" type. You're dealing with the same old object, just via a less\n * ambiguous and confusing interface. Compared to vanilla Date, rTime:\n * Allows creating a new Date without manually specifying every field,\n * such as when only time of day matters. Accepts broader string formats. Provides additional\n * straightforward UTC <-> Local time zone helpers. Disambiguates some field names (but aliases in\n * original names to prevent frustration). Makes months one-based. Always returns UTC values\n * by default,and getting a field value in local time is always explicit. As a shortcut, rTime.ms()\n * may be used to return a Time Value (ms) number instead of a Date object.\n * Note: It may not seem necessary for some fields, like \"year\", to have \"UTC\" and \"local\"\n * variations, but that starts to make a difference around December 31.\n * @module rTime\n */\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Entry point function accepts various forms of time information: Usual Date values - single\n * string describing full date/time; single number (Time Value); a series of numbers\n * for date/time fields; a key/value object with time field names and numeric values. Has\n * object properties \"get\", \"getUTC\" (just an alias of \"get\"), and \"getLocal\" to group accessor\n * functions. Also has an \"ms()\" function property to return a Time Value instead of a Date object\n *\n * @param {(string|...number|...timeFieldHash|Date)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n *\n * @return {Date} new Date(), created using arguments. Will be \"Invalid Date\" object\n *   if arguments don't eventually resolve to a real date\n *\n * @example\n * // all return the same as new Date() would\n * rTime();\n * rTime({});\n * rTime([]);\n *\n * @example\n * // both return the same as Date.now()\n * rTime.ms();\n * rTime.get.timeValue(rTime());\n *\n * @example\n * <caption>The following, when called in 2016 within the eastern time zone,\n * returns \"Date 2016-02-01T16:00:00.000Z\" (in Firefox. Chrome and Edge always\n * report the local conversion)</caption>\n * // equivalent to new Date(2016, 1, 1, 11)\n * rTime({\n * \tmonth: 2,\n * \thour: 11\n * });\n */\n// eslint-enable valid-jsdoc\nexport default function rTime(...timeArgs) {\n\tconst numberOfArgs = timeArgs.length;\n\tconst firstArg = timeArgs[0];\n\tconst firstArgType = typeof firstArg;\n\n\tif (numberOfArgs === 0\n\t\t|| firstArg === null) {\n\t\treturn new Date();\n\t}\n\n\t// single valid arg - either an array of values to try as args, a timeFieldHash,\n\t// or string, possibly user input\n\tif (numberOfArgs === 1) {\n\t\t// rTime(aDate) just returns the date\n\t\tif (firstArg instanceof Date) {\n\t\t\treturn firstArg;\n\t\t}\n\n\t\t// allow an array, why not. Recurse.\n\t\tif (Array.isArray(firstArg)) {\n\t\t\treturn rTime(...firstArg);\n\t\t}\n\n\t\t// date/time string - valid, or returns Invalid Date object\n\t\tif (firstArgType === 'string') {\n\t\t\treturn getExpectedDateFromString(firstArg);\n\t\t}\n\n\t\tif (firstArgType === 'number') {\n\t\t\t// exception to date rules: if the only argument is a number less\n\t\t\t// than five digits, treat it as a year rather than a time value (ms)\n\t\t\tif (firstArg < 10000) {\n\t\t\t\treturn new Date(firstArg, 0);\n\t\t\t}\n\n\t\t\treturn new Date(firstArg);\n\t\t}\n\t}\n\n\tif (numberOfArgs > 1) {\n\t\tif (firstArgType === 'number') {\n\t\t\tconst month = adjustMonthToDate(timeArgs[1]);\n\n\t\t\treturn new Date(firstArg, month, ...timeArgs.slice(2));\n\t\t}\n\n\t\t// TODO: first arg object, second arg array\n\t\t// TODO: arrays(contents following above object, array format)\n\t}\n\n\t// one or more args made it through the filters\n\tif (firstArgType === 'object') {\n\t\t// plain object (non-Array, non-Null, non-Date) is a timeFieldHash\n\t\tif (Object.keys(firstArg).length) {\n\t\t\treturn makeTimeFromFields(...timeArgs);\n\t\t}\n\n\t\treturn new Date();\n\t}\n\n\treturn new Date('one or more invalid arguments');\n}\n\nfunction adjustMonthToDate(month) {\n\t// e.g. if the user puts in 3, they mean March not April\n\treturn month - 1;\n}\n\nfunction adjustMonthFromDate(month) {\n\t// if rTime retrieves a month from a date, that number is low by 1\n\treturn month + 1;\n}\n\nfunction getExpectedDateFromString(dateString) {\n\t// date/time from strings breaks with typical `new Date() behavior`:\n\t// - month is correct\n\t// - IF string is ISO format, it creates in UTC time rather than local\n\tconst rawDate = new Date(dateString);\n\tconst isISO = /^\\d{4,6}-\\d{2}-\\d{2}$/.test(dateString);\n\n\treturn isISO\n\t\t? new Date(rawDate.getTime() + (rawDate.getTimezoneOffset() * 60 * 1000))\n\t\t: rawDate;\n}\n\n// eslint doesn't like this complex set of acceptable params\n// eslint-disable valid-jsdoc\n/**\n * Same as rTime(), but returns a Time Value rather than a Date\n * @function ms\n * @param {(string|...number|...timeFieldHash)}\n *         [timeArgs]\n *         Any of several formats for desired time parameters\n * @return {number}\n *         Time Value (ms since 01/01/1970 UTC)\n */\n// eslint-enable valid-jsdoc\nrTime.ms = function ms(...timeArgs) {\n\tif (timeArgs.length === 0) {\n\t\treturn Date.now();\n\t}\n\n\treturn rTime.get.timeInMs(\n\t\trTime(...timeArgs)\n\t);\n};\n\n/**\n * Object format to make new Date()s out of partial bits of information\n * @typedef {Object} timeFieldHash\n * @property {number|Date} year four digits or a date to extract that value from\n * @property {number|Date} month 1-12 or a date to extract that value from\n * @property {number|Date} dayOfMonth 1-31 or a date to extract that value from\n * @property {number|Date} hour 0-23 or a date to extract that value from\n * @property {number|Date} minute 0-59 or a date to extract that value from\n * @property {number|Date} second 0-59 or a date to extract that value from\n * @property {number|Date} ms millisecond 0-999 or a date to extract that value from\n * @property {boolean} isUTC new time should be in UTC rather than local\n */\n\n/**\n * Generates new Date object with incomplete information. Follows one rule: From\n * longest to shortest (year -> ms), use a fallback for unspecified fields. Until a field has been\n * specified, use the current time. Afterward, use either 0 (most fields) or 1 (month, dayOfMonth).\n * @protected\n * @param {...timeFieldHash} fieldHashes\n *         One or more hashes of field names and values. Note \"day\",\n * \"dayOfMonth\", and \"ms\" fields rather than \"day\", \"date\", and \"milliseconds\". The first two are\n * ambiguous, and \"ms\" is just much easier and a well-used abbreviation\n *\n * @throws Will throw if there are no objects passed (empty object(s) are okay - returns new Date())\n *\n * @return {Date} new Date() created with values from all hashes. Will create in UTC time\n * (equivalent to new Date(Date.UTC())) one of the hashes includes: \"isUTC\": true\n */\nfunction makeTimeFromFields(...fieldHashes) {\n\tif (fieldHashes.length === 0) {\n\t\tthrow new Error('making time from fields requires at least one fields object.'\n\t\t\t+ 'This should never trigger, as it is only called internally.');\n\t}\n\tconst nowDate = new Date();\n\tconst allFields = fieldHashes\n\t\t.reduce((accumulator, hash) => {\n\t\t\tif (typeof hash === 'object'\n\t\t\t\t&& !Array.isArray(hash)\n\t\t\t\t&& hash !== null\n\t\t\t\t&& Object.keys(hash).length > 0\n\t\t\t) {\n\t\t\t\treturn Object.assign({}, accumulator, hash);\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\n\tif (Object.keys(allFields).length === 0) {\n\t\treturn nowDate;\n\t}\n\n\tconst { getLocal } = rTime;\n\tconst nowValues = {\n\t\tyear: getLocal.year(nowDate),\n\t\tmonth: getLocal.month(nowDate),\n\t\tdayOfMonth: getLocal.dayOfMonth(nowDate),\n\t\thour: getLocal.hour(nowDate),\n\t\tminute: getLocal.minute(nowDate),\n\t\tsecond: getLocal.second(nowDate),\n\t\tms: getLocal.ms(nowDate),\n\t};\n\n\tfunction reduceFields({ prevDoUseMinValue, latestValues, defaults }, fieldName) {\n\t\tconst rawFieldValue = allFields[fieldName];\n\t\tconst newFieldValue = rawFieldValue instanceof Date\n\t\t\t\t? getLocal[fieldName](rawFieldValue)\n\t\t\t\t: rawFieldValue;\n\t\tconst newFieldObject = newFieldValue ? { [fieldName]: newFieldValue } : {};\n\n\t\tconst doUseMinValue = prevDoUseMinValue\n\t\t\t? true\n\t\t\t: !!newFieldValue;\n\n\t\t// work around JS treating days and months like they're zero-based\n\t\tconst minFieldValue = (fieldName === 'month' || fieldName === 'dayOfMonth')\n\t\t\t? 1\n\t\t\t: 0;\n\n\t\tconst fallbackValue = (doUseMinValue === true)\n\t\t\t? { [fieldName]: minFieldValue }\n\t\t\t: { [fieldName]: defaults[fieldName] };\n\n\t\treturn {\n\t\t\tprevDoUseMinValue: doUseMinValue,\n\t\t\tlatestValues: Object.assign({}, latestValues, fallbackValue, newFieldObject),\n\t\t\tdefaults,\n\t\t};\n\t}\n\n\tconst fullValues = Object.keys(nowValues)\n\t\t.reduce(reduceFields, {\n\t\t\tprevDoUseMinValue: false,\n\t\t\tlatestValues: {},\n\t\t\tdefaults: nowValues,\n\t\t});\n\n\tconst {\n\t\tyear,\n\t\tmonth,\n\t\tdayOfMonth,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tms,\n\t} = fullValues.latestValues;\n\n\tif (allFields.isUTC) {\n\t\t// convert month number to zero-based\n\t\treturn new Date(Date.UTC(year, adjustMonthToDate(month), dayOfMonth, hour, minute, second, ms));\n\t}\n\n\t// convert month number to zero-based\n\treturn new Date(year, adjustMonthToDate(month), dayOfMonth, hour, minute, second, ms);\n}\n\n/**\n * Holds function properties for extracting individual values from a given date in UTC time.\n * All return values are retrieved using Date.prototype.getUTC[field](). Has an alias\n * called \"getUTC\"\n * @see  rTime~getUTC\n * @namespace rTime~get\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.get.year(someDate)\n */\nrTime.get = {\n\t/**\n\t * Get a given date as a Time Value: ms since 1970 began\n\t * @memberof! rTime~get\n\t * @param {Date} d Any Date object\n\t * @return {number} milliseconds since Unix epoch\n\t */\n\ttimeValue(d) {\n\t\treturn d.getTime();\n\t},\n\n\t/**\n\t * Get the year of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getUTCFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn adjustMonthFromDate(d.getUTCMonth());\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getUTCDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getUTCDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getUTCHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tminute(d) {\n\t\treturn d.getUTCMinutes();\n\t},\n\n\t/**\n\t * Get the second of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t */\n\tsecond(d) {\n\t\treturn d.getUTCSeconds();\n\t},\n\n\t/**\n\t * Get the millisecond (ms) of a given Date object\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t */\n\tms(d) {\n\t\treturn d.getUTCMilliseconds();\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of timeValue that is more immediately obvious\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttimeInMs(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of timeValue to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} milliseconds since Unix epoch\n\t * @see rTime~get.timeValue\n\t */\n\ttime(d) {\n\t\treturn this.timeValue(d);\n\t},\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~get.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~get.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~get.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~get.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~get.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~get\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n\n/**\n * Alias of \"get\"\n * @namespace rTime~getUTC\n * @see rTime~get\n */\nrTime.getUTC = rTime.get;\n\n/**\n * Holds function properties for extracting individual values from a given date in Local Time.\n * All return values are converted from UTC to in the user's current time zone, using the built-in\n * Date.prototype.get[field] function.\n * @namespace rTime~getLocal\n * @type {object.<function>}\n * @example\n * // get the year of a given date\n * rTime.getLocal.year(someDate)\n *\n * @example\n * // how many hours to add to convert a specified time from \"local\" to \"fixed\"\n * // (useful for showing the time a user originally entered regardless of time zone, by both\n * // storing the time in UTC and displaying in UTC)\n * rTime.getLocal.hoursToUTC(someDate)\n */\nrTime.getLocal = {\n\t/**\n\t * Get the year of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t */\n\tyear(d) {\n\t\treturn d.getFullYear();\n\t},\n\n\t/**\n\t * Get the one-based month number of a given date according to local time.\n\t * Underlying Date object is zero-based for month, requiring simple conversion\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-12\n\t */\n\tmonth(d) {\n\t\treturn adjustMonthFromDate(d.getMonth());\n\t},\n\n\t/**\n\t * Get the day of the month of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31\n\t */\n\tdayOfMonth(d) {\n\t\treturn d.getDate();\n\t},\n\n\t/**\n\t * Get the day of the week of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tday(d) {\n\t\treturn d.getDay();\n\t},\n\n\t/**\n\t * Get the hour of a given Date object according to local time\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\thour(d) {\n\t\treturn d.getHours();\n\t},\n\n\t/**\n\t * Get the minute of a given Date object. Alias of get.minute\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\tminute(d) {\n\t\treturn rTime.get.minute(d);\n\t},\n\n\t/**\n\t * Get the second of a given Date object. Alias of get.second\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\tsecond(d) {\n\t\treturn rTime.get.second(d);\n\t},\n\n\t/**\n\t * Get the ms (millisecond) of a given Date object. Alias of get.millisecond\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t */\n\tms(d) {\n\t\treturn rTime.get.ms(d);\n\t},\n\n\t/**\n\t * Get the number of milliseconds from the local timezone to UTC for a given Date object.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t *\n\t * @example\n\t * // When called from Ohio, which is GMT-5, or GMT-4 during daylight savings\n\t * // (useful as ms with Time Values, converted to hours here to read)\n\t * rTime.get.msToUTC(rTime({\"month\": 2})) / 1000 / 60 / 60;\n\t * // -> 5\n\t * rTime.get.msToUTC(rTime({\"month\": 7})) / 1000 / 60 / 60;\n\t * // -> 4\n\t */\n\tmsToUTC(d) {\n\t\treturn d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesToUTC(d) {\n\t\treturn d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from the local timezone to UTC for a given Date object.\n\t * Useful for converting from local time to UTC.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursToUTC(d) {\n\t\treturn d.getTimezoneOffset() / 60;\n\t},\n\n\t/**\n\t * Get the number of milliseconds from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-84,600,000 ms (0-23.5 hours), converted from minutes\n\t */\n\tmsFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() * 60 * 1000;\n\t},\n\n\t/**\n\t * Get the number of minutes from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-1,410 minutes (0-23.5 hours)\n\t */\n\tminutesFromUTC(d) {\n\t\treturn -d.getTimezoneOffset();\n\t},\n\n\t/**\n\t * Get the number of hours from UTC to the local timezone for a given Date object.\n\t * Useful for converting from UTC to local time.\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23.5 hours, converted from minutes\n\t */\n\thoursFromUTC(d) {\n\t\treturn -d.getTimezoneOffset() / 60;\n\t},\n\n\t/*\n\t * Aliases\n\t */\n\n\t/**\n\t * An alias of year to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} four digit year\n\t * @see rTime~getLocal.year\n\t */\n\tfullYear(d) {\n\t\treturn this.year(d);\n\t},\n\n\t/**\n\t * An alias of day to match dayOfMonth naming\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-6\n\t */\n\tdayOfWeek(d) {\n\t\treturn this.day(d);\n\t},\n\n\t/**\n\t * An alias of dayOfMonth to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 1-31 day number\n\t * @see rTime~getLocal.dayOfMonth\n\t */\n\tdate(d) {\n\t\treturn this.dayOfMonth(d);\n\t},\n\n\t/**\n\t * An alias of hour to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-23\n\t * @see rTime~getLocal.hour\n\t */\n\thours(d) {\n\t\treturn this.hour(d);\n\t},\n\n\t/**\n\t * An alias of minute to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.minute\n\t */\n\tminutes(d) {\n\t\treturn this.minute(d);\n\t},\n\n\t/**\n\t * An alias of second to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59\n\t * @see rTime~getLocal.second\n\t */\n\tseconds(d) {\n\t\treturn this.second(d);\n\t},\n\n\t/**\n\t * An alias of ms to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmilliseconds(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * A longform alias of ms\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-999\n\t * @see rTime~getLocal.ms\n\t */\n\tmillisecond(d) {\n\t\treturn this.ms(d);\n\t},\n\n\t/**\n\t * An alias of minutesToUTC to mirror the Date API\n\t * @memberof! rTime~getLocal\n\t * @param {Date} d Date object initialized with a given date/time\n\t * @return {number} 0-59 minutes\n\t * @see rTime~get.minutesToUTC\n\t */\n\ttimezoneOffset(d) {\n\t\treturn rTime.getLocal.minutesToUTC(d);\n\t},\n};\n"],"sourceRoot":"/source/"}